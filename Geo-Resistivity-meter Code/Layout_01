'''
Geo-Resistivity-meter

Hardware and software repository for a geophysical instrument

**Descrição da função e objetivo do código "Geo-Resistivity-Meter":** 

O código "Geo-Resistivity-Meter" é um repositório de hardware e software desenvolvido 
para a operação de um equipamento de eletrorresistividade. Ele se destina a funcionar 
como uma interface gráfica de usuário (GUI) que permite aos usuários interagirem com 
o dispositivo de medição de resistividade geofísica. O objetivo principal do código 
é fornecer uma plataforma para operar e executar medições de resistividade do solo 
ou subsolo em aplicações geofísicas. O código utiliza a biblioteca "tkinter" para 
criar a interface gráfica da janela de login do instrumento geofísico. 

O objetivo do código "Geo-Resistivity-Meter" é fornecer uma interface amigável 
para os usuários interagirem com um instrumento geofísico de medição de resistividade. 
O código facilita o acesso à funcionalidade principal do dispositivo, permitindo que 
os usuários realizem medições geofísicas importantes e obtenham dados relevantes 
sobre a resistividade do solo ou subsolo em determinados locais. 

**Observations:**

1. Some parts of the code are missing or incomplete, such as the definition of the "selectPath()" function and other functions, as well as the import of the "salve" and "calculadora" modules.

2. Some lines of code are commented, indicating that these parts may be under development or adapted from other modules.

3. The GUI allows user interaction to configure measurements and display results.

4. The code is under development and may not be fully functional or optimized.

5. For the code to work correctly, the imported modules must be available in the execution environment, and any other dependencies must be installed.
'''

from tkinter import*  # Imports all modules and classes from the tkinter library, used to create graphical interfaces.
from tkinter.ttk import*  # Imports all widgets and advanced styles from the ttk (Themed Tkinter) library.
from PIL import Image, ImageTk  # Imports the Image and ImageTk classes from the PIL (Python Imaging Library) module for working with images.
import main_02 as ni  # Imports the main_02 module and renames it to ni.
import customtkinter  # Imports the customtkinter module, which may contain customizations or custom widgets.
import time  # Imports the time module, used for pausing execution and creating delay effects.
import pandas as pd  # Imports the pandas module and renames it to pd, used for working with data structures and data analysis.
from io import StringIO  # Imports the StringIO class from the io module, used for working with strings as files.
import salve as sv  # Imports the salve module and renames it to sv, which can be used for creating and saving files.

class janelaLogin():  # Defines a class called janelaLogin representing the login window of the graphical interface.
    def __init__(self):  # Defines the constructor method of the janelaLogin class, which will be executed when creating an object of this class.
        self.root = Tk()  # Creates the main window (root) using the Tk() class.
        self.root.title('Geo-Resistivity-Meter')  # Sets the window title as "Geo-Resistivity-Meter".
        width_of_window = 540 # Defines the width and height of the window.
        height_of_window = 280
        screen_width = self.root.winfo_screenwidth() # Gets the width and height of the computer screen.
        screen_height = self.root.winfo_screenheight()
        x_coordinate = (screen_width/2)-(width_of_window/2)
        y_coordinate = (screen_height/2)-(height_of_window/2)
        self.root.geometry("%dx%d+%d+%d" % (width_of_window, height_of_window, x_coordinate, y_coordinate))  # Defines the geometry of the window with the specified width, height, and calculated coordinates.
        
        icon = PhotoImage(file="fig/energia2.png")  # Loads an image "energia2.png" to be used as the window icon.
        self.root.iconphoto(True, icon)  # Sets the loaded image as the window icon.
        
        s = Style()  # Creates a Style object, used to configure styles and themes of widgets.
        s.theme_use('clam')  # Sets the theme to 'clam', which is one of the available themes in the ttk library.
        s.configure("red.Horizontal.TProgressbar", foreground='red', background='#4f4f4f')  # Configures the style for the horizontal progress bar (Progressbar widget) with red foreground color and gray background color.
        
        progress = Progressbar(self.root, style="red.Horizontal.TProgressbar", orient=HORIZONTAL, length=500, mode='determinate')  # Creates a Progressbar widget in the window, using the previously configured style, with horizontal orientation, length of 500 pixels, and determinate mode (indicating a progress value).
        progress.place(x=0, y=235)  # Positions the progress bar at the specified (x, y) coordinate in the window.
        
        a = '#249794'  # Background color for the frame.
        
        frame1 = Frame(self.root, width=510, height=241)  # Creates a Frame widget in the window with the specified width and height.
        frame1.place(x=0, y=0)  # Positions the frame at the specified (x, y) coordinate in the window.
        
        home_image = ImageTk.PhotoImage(Image.open("fig/logo2.png"))  # Loads an image "logo2.png" to be used in the Label widget.
        Label(frame1, image=home_image).grid(row=1, columnspan=1)  # Creates a Label widget with the loaded image and places it in the second row of the grid of the frame1 widget.
        
        def EXT():  # Defines the function to close the window.
            self.root.destroy()
        
        def new_win():  # Defines the function to open the next window.
            ni.run()
            
        def bar():  # Defines the function to update a progress bar while executing other functions.
            label_bar = Label(self.root, text='Loading...')
            lst4 = ('Calibri (Body)', 10)
            label_bar.config(font=lst4)
            label_bar.place(x=18, y=210)
            import time
            r = 0
            for i in range(100):
                progress['value'] = r
                self.root.update_idletasks()
                time.sleep(0.03)
                r += 1
            
            EXT()
            new_win()
        
        b1 = Button(self.root, text='Iniciar', command=bar)  # Creates a button in the window with the text "Iniciar" and assigns the bar() function to be executed when clicked.
        b1.place(x=158, y=198, width=100, height=42)  # Positions the button at the specified (x, y) coordinate with the specified width and height.
        
        b2 = Button(self.root, text='Fechar', command=EXT)  # Creates a button in the window with the text "Fechar" and assigns the EXT() function to be executed when clicked.
        b2.place(x=262, y=198, width=100, height=42)  # Positions the button at the specified (x, y) coordinate with the specified width and height.

        self.root.mainloop()  # Starts the main event loop of the graphical interface, waiting for events (such as button clicks) and responding to them.

janelaLogin()  # Creates an object of the janelaLogin class, starting the graphical interface.

